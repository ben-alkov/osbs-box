- name: Generate certificates for OSBS-Box
  hosts: localhost
  gather_facts: false
  tags:
    - certificates

  tasks:
    - name: Make sure certificate directories exist
      file:
        mode: 0700
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ certificates_dir }}"
        - "{{ koji_certs_dir }}"
        - "{{ registry_certs_dir }}"

    - name: Generate certificates
      include_tasks: tasks/generate-certs.yaml


- name: Prepare for deployment of openshift applications
  hosts: localhost
  gather_facts: false
  tags:
    - koji
    - registry
    - projects
    - buildroot
    # One tag for all openshift applications
    - openshift

  tasks:
    - name: Login as openshift *USER*
      command: oc login -u "{{ ocp_dev_account }}" -p "{{ ocp_dev_passwd }}" "{{ openshift_api }}"
      changed_when: true

    - name: Make sure directory for openshift files exists
      file:
        mode: 0700
        path: "{{ openshift_files }}"
        state: directory

    - name: Process parameters file and put it in openshift files dir
      template:
        mode: 0660
        src: openshift/params/osbs-box.env.j2
        dest: "{{ openshift_files }}/osbs-box.env"


- name: Create all projects
  hosts: localhost
  gather_facts: false
  tags:
    - projects
    - openshift

  tasks:
    - name: Create the project
      command: oc new-project "{{ item }}"
      register: new_project
      failed_when: new_project.rc != 0
                  or "already exists" in new_project.stderr
      changed_when: new_project.rc == 0
      loop:
        - "{{ koji_project }}"
        - "{{ registry_project }}"
        - "{{ orchestrator_project }}"
        - "{{ worker_project }}"


- name: Kubeadmin tasks
  hosts: localhost
  gather_facts: false
  tags:
    - projects
    - openshift
  vars:
    # This is a constant, please do not override
    projects:
      - "{{ orchestrator_project }}"
      - "{{ worker_project }}"

  tasks:
    - name: Login as openshift *ADMIN*
      command:
        oc login -u kubeadmin -p "{{ kubeadmin_pwd }}" "{{ openshift_api }}"
      changed_when: true

    - name: Allow koji & registry containers to run as any user
      command:
        oc -n "{{ item }}" adm policy add-scc-to-user anyuid --serviceaccount default
      changed_when: true
      loop:
        - "{{ koji_project }}"
        - "{{ registry_project }}"

    - name: Add necessary roles to builder serviceaccounts
      command:
        oc -n "{{ item.0 }}" adm policy add-role-to-user "{{ item.1 }}" -z builder
      changed_when: true
      loop:
        "{{ projects | product(roles) | list }}"
      vars:
        roles:
          - "edit"
          - "system:build-strategy-custom"

    - name: Drop privileges, Login as openshift *USER*
      command:
        oc login -u "{{ ocp_dev_account }}" -p "{{ ocp_dev_passwd }}" "{{ openshift_api }}"
      changed_when: true


- name: Set up dockerhub pull secret
  hosts: localhost
  gather_facts: false
  tags:
    - pull_secret

  tasks:
    - name: Create dockerhub pull secret
      no_log: true
      shell:
        set -o pipefail;
        oc create secret docker-registry dockerhub
          --docker-server=docker.io
          --docker-username="{{ docker_id }}"
          --docker-password="{{ docker_password }}"
          --docker-email="{{ docker_email }}"
          --dry-run=client
          --output json |
        oc -n "{{ item }}" replace --force -f -
      loop:
        - "{{ registry_project }}"
        - "{{ koji_project }}"
        - "{{ orchestrator_project }}"
        - "{{ worker_project }}"
      changed_when: true

    - name: Link dockerhub pull secret to builder service account
      tags: link_pull_secret
      command: oc -n "{{ item }}" secrets link builder dockerhub --for=pull
      loop:
        - "{{ registry_project }}"
        - "{{ koji_project }}"
        - "{{ orchestrator_project }}"
        - "{{ worker_project }}"
      changed_when: true


- name: Run koji containers on openshift
  hosts: localhost
  gather_facts: false
  vars:
    # This is a constant, please do not override
    koji_components:
      - koji-volumes
      - koji-base
      - koji-client
      - koji-builder
      - koji-db
      - koji-hub
  tags:
    - koji
    - openshift

  tasks:
    - name: Create koji-certs secret in koji namespace
      shell:
        set -o pipefail;
        oc create secret generic koji-certs
            --from-file "{{ certificates_dir }}/osbs-box-ca.crt"
            --from-file "{{ koji_certs_dir }}/koji-hub.crt"
            --from-file "{{ koji_certs_dir }}/koji-hub.key"
            --from-file "{{ koji_certs_dir }}/kojiweb.pem"
            --from-file "{{ koji_certs_dir }}/kojibuilder.pem"
            --from-file "{{ koji_certs_dir }}/kojiadmin.pem"
            --from-file "{{ koji_certs_dir }}/kojiosbs.pem"
            --dry-run=client
            --output json |
        oc -n "{{ koji_project }}" replace --force -f -
      changed_when: true

    - name: Process koji config templates, output in openshift files dir
      template:
        mode: 0660
        src: "openshift/configs/{{ item }}.j2"
        dest: "{{ openshift_files }}/{{ item }}"
      loop:
        - koji-builder-osbs.conf
        - koji-hub-web.conf

    - name: Create kojiweb and osbs-client configmaps in koji namespace
      shell:
        set -o pipefail;
        oc create configmap "{{ item.name }}"
            --from-file "{{ item.dest }}={{ openshift_files }}/{{ item.src }}"
            --dry-run=client
            --output json |
        oc -n "{{ koji_project }}" replace --force -f -
      changed_when: true
      loop:
        - name: koji-builder-osbs
          src: koji-builder-osbs.conf
          dest: osbs.conf

        - name: koji-hub-web
          src: koji-hub-web.conf
          dest: web.conf

    - name: Copy openshift templates for koji components to openshift files dir
      copy:
        mode: 0660
        src: "openshift/templates/{{ item }}.yaml"
        dest: "{{ openshift_files }}/{{ item }}.yaml"
      loop:
        "{{ koji_components }}"

    - name: Create openshift resources for all koji components
      shell:
        set -o pipefail;
        oc process -f "{{ openshift_files }}/{{ item }}.yaml"
                   --param-file "{{ openshift_files }}/osbs-box.env"
                   --ignore-unknown-parameters |
        oc -n "{{ koji_project }}" apply -f -
      changed_when: true
      loop:
        "{{ koji_components }}"

    - name: Build (and automatically deploy) koji components
      command: oc -n "{{ koji_project }}" start-build koji-base
      changed_when: true


- name: Run registry container on openshift
  hosts: localhost
  gather_facts: false
  tags:
    - registry
    - openshift

  tasks:
    - name: Create registry-cert secret in openshift
      shell:
        set -o pipefail;
        oc create secret generic registry-cert
            --from-file "{{ registry_certs_dir }}/osbs-registry.crt"
            --from-file "{{ registry_certs_dir }}/osbs-registry.key"
            --dry-run=client
            --output json |
        oc -n "{{ registry_project }}" replace --force -f -
      changed_when: true

    - name: Copy osbs-registry template to openshift files dir
      copy:
        mode: 0660
        src: openshift/templates/osbs-registry.yaml
        dest: "{{ openshift_files }}/osbs-registry.yaml"

    - name: Deploy osbs-registry
      shell:
        set -o pipefail;
        oc process -f "{{ openshift_files }}/osbs-registry.yaml"
                   --param-file "{{ openshift_files }}/osbs-box.env"
                   --ignore-unknown-parameters |
        oc -n "{{ registry_project }}" apply -f -;
        oc -n "{{ registry_project }}" rollout status dc/osbs-registry --watch=true
      changed_when: true

    - name: Completely remove dockerhub pull secret from osbs-registry project
      shell:
        set -o pipefail;
        oc -n "{{ registry_project }}" secrets unlink builder dockerhub;
        oc -n "{{ registry_project }}" delete secret dockerhub;
        oc -n "{{ registry_project }}" patch dc osbs-registry
           --type json -p '[{ "op":"remove", "path":"/spec/template/spec/imagePullSecrets" }]'
      changed_when: true


- name: Set up OSBS orchestrator and worker projects
  hosts: localhost
  gather_facts: false
  vars:
    # This is a constant, please do not override
    projects:
      - "{{ orchestrator_project }}"
      - "{{ worker_project }}"
  tags:
    - osbs
    - openshift

  tasks:
    - name: Create kojisecret in orchestrator and worker projects
      shell:
        set -o pipefail;
        oc create secret generic kojisecret
            --from-file "cert={{ koji_certs_dir }}/kojiosbs.pem"
            --from-file "ca={{ certificates_dir }}/osbs-box-ca.crt"
            --from-file "serverca={{ certificates_dir }}/osbs-box-ca.crt"
            --dry-run=client
            --output json |
        oc -n "{{ item }}" replace --force -f -
      changed_when: true
      loop:
        "{{ projects }}"

    - name: Query openshift for osbs-registry IP
      command: oc -n "{{ registry_project }}" get svc osbs-registry
                  --output 'jsonpath={ .spec.clusterIP }'
      register: registry_ip_query
      changed_when: false

    - name: Set registry_ip fact (needed for orchestrator config templates)
      set_fact:
        registry_ip: "{{ registry_ip_query.stdout }}"

    - name: Process orchestrator config templates, output in openshift files dir
      template:
        mode: 0660
        src: "openshift/configs/{{ item }}.j2"
        dest: "{{ openshift_files }}/{{ item }}"
      loop:
        - reactor-config-map.yaml
        - client-config-secret.conf

    - name: Create reactor-config-map in orchestrator project
      shell:
        set -o pipefail;
        oc create configmap reactor-config-map
          --from-file "config.yaml={{ openshift_files }}/reactor-config-map.yaml"
          --dry-run=client
          --output json |
        oc -n "{{ orchestrator_project }}" replace --force -f -
      changed_when: true

    - name: Create client-config-secret in orchestrator project
      shell:
        set -o pipefail;
        oc create secret generic client-config-secret
          --from-file "osbs.conf={{ openshift_files }}/client-config-secret.conf"
          --dry-run=client
          --output json |
        oc -n "{{ orchestrator_project }}" replace --force -f -
      changed_when: true


- name: Build OSBS buildroot
  hosts: localhost
  gather_facts: false
  tags:
    - buildroot
    - openshift

  tasks:
    - name: Copy osbs-buildroot template to openshift files dir
      copy:
        mode: 0660
        src: openshift/templates/osbs-buildroot.yaml
        dest: "{{ openshift_files }}/osbs-buildroot.yaml"

    - name: Create openshift resources for osbs-buildroot
      shell:
        set -o pipefail;
        oc process -f "{{ openshift_files }}/osbs-buildroot.yaml"
                   --param-file "{{ openshift_files }}/osbs-box.env"
                   --ignore-unknown-parameters |
        oc -n "{{ orchestrator_project }}" apply -f -
      changed_when: true

    - name: Build osbs-buildroot
      command: oc -n "{{ orchestrator_project }}"
                  start-build osbs-buildroot
      changed_when: true
